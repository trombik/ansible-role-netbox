---
- hosts: localhost
  roles:
    - role: trombik.sysctl
    - role: trombik.postgresql
    - role: trombik.redis
    - role: ansible-role-netbox
    - role: trombik.nginx
  vars:

    netbox_db_password: password
    netbox_redis_tasks_password: "{{ redis_password }}"
    netbox_redis_caching_password: "{{ redis_password }}"
    netbox_config: |
      ALLOWED_HOSTS = []
      DATABASE = {
          'NAME': '{{ netbox_db_name }}',
          'USER': '{{ netbox_db_user }}',
          'PASSWORD': '{{ netbox_db_password }}',
          'HOST': '{{ netbox_db_host }}',
          'PORT': '{{ netbox_db_port }}',
          'CONN_MAX_AGE': 300,
      }
      REDIS = {
          'tasks': {
              'HOST': '{{ netbox_redis_tasks_host }}',
              'PORT': {{ netbox_redis_tasks_port }},
              'PASSWORD': '{{ netbox_redis_tasks_password }}',
              'DATABASE': {{ netbox_redis_tasks_database }},
              'SSL': {% if netbox_redis_tasks_tls %}True{% else %}False{% endif %},
              # 'INSECURE_SKIP_TLS_VERIFY': False,
          },
          'caching': {
              'HOST': '{{ netbox_redis_caching_host }}',
              'PORT': {{ netbox_redis_caching_port }},
              'PASSWORD': '{{ netbox_redis_caching_password }}',
              'DATABASE': {{ netbox_redis_caching_database }},
              'SSL': {% if netbox_redis_caching_tls %}True{% else %}False{% endif %},
              # 'INSECURE_SKIP_TLS_VERIFY': False,
          }
      }
      # python3.8 /usr/local/share/netbox/generate_secret_key.py
      SECRET_KEY = 'eu806L3V2$^ykz1tKAkZ=^$oGVXS!bcQUrhesk4mknFFxNz!df'
      ADMINS = [
          ('John Doe', 'jdoe@example.com'),
      ]
      BASE_PATH = ''
      CORS_ORIGIN_ALLOW_ALL = True
      CORS_ORIGIN_WHITELIST = [
          # 'https://hostname.example.com',
      ]
      CORS_ORIGIN_REGEX_WHITELIST = [
          # r'^(https?://)?(\w+\.)?example\.com$',
      ]
      DEBUG = True
      EMAIL = {
          'SERVER': 'localhost',
          'PORT': 25,
          'USERNAME': '',
          'PASSWORD': '',
          'USE_SSL': False,
          'USE_TLS': False,
          'TIMEOUT': 10,  # seconds
          'FROM_EMAIL': '',
      }
      EXEMPT_VIEW_PERMISSIONS = [
          # 'dcim.site',
          # 'dcim.region',
          # 'ipam.prefix',
      ]
      INTERNAL_IPS = ('127.0.0.1', '::1')
      LOGGING = {}
      LOGIN_PERSISTENCE = False
      LOGIN_REQUIRED = False
      LOGIN_TIMEOUT = None
      METRICS_ENABLED = False
      PLUGINS = []
      REMOTE_AUTH_ENABLED = False
      REMOTE_AUTH_BACKEND = 'netbox.authentication.RemoteUserBackend'
      REMOTE_AUTH_HEADER = 'HTTP_REMOTE_USER'
      REMOTE_AUTH_AUTO_CREATE_USER = True
      REMOTE_AUTH_DEFAULT_GROUPS = []
      REMOTE_AUTH_DEFAULT_PERMISSIONS = {}
      RELEASE_CHECK_URL = None
      RQ_DEFAULT_TIMEOUT = 300
      SESSION_COOKIE_NAME = 'sessionid'
      SESSION_FILE_PATH = None
      TIME_ZONE = 'UTC'
      DATE_FORMAT = 'N j, Y'
      SHORT_DATE_FORMAT = 'Y-m-d'
      TIME_FORMAT = 'g:i a'
      SHORT_TIME_FORMAT = 'H:i:s'
      DATETIME_FORMAT = 'N j, Y g:i a'
      SHORT_DATETIME_FORMAT = 'Y-m-d H:i'

    # _________________________________________postgresql
    postgresql_initial_password: password
    postgresql_debug: yes
    os_sysctl:
      FreeBSD: {}
      OpenBSD:
        kern.seminfo.semmni: 60
        kern.seminfo.semmns: 1024
      Debian: {}
      RedHat: {}
    sysctl: "{{ os_sysctl[ansible_os_family] }}"

    os_postgresql_extra_packages:
      FreeBSD:
        - "databases/postgresql{{ postgresql_major_version }}-contrib"
      OpenBSD:
        - postgresql-contrib
      Debian:
        - postgresql-contrib
      RedHat:
        - "postgresql{{ postgresql_major_version }}-contrib"

    postgresql_extra_packages: "{{ os_postgresql_extra_packages[ansible_os_family] }}"
    postgresql_pg_hba_config: |
      host    all             all             127.0.0.1/32            {{ postgresql_default_auth_method }}
      host    all             all             ::1/128                 {{ postgresql_default_auth_method }}
      local   replication     all                                     trust
      host    replication     all             127.0.0.1/32            trust
      host    replication     all             ::1/128                 trust
    postgresql_config: |
      {% if ansible_os_family == 'Debian' %}
      data_directory = '{{ postgresql_db_dir }}'
      hba_file = '{{ postgresql_conf_dir }}/pg_hba.conf'
      ident_file = '{{ postgresql_conf_dir }}/pg_ident.conf'
      external_pid_file = '/var/run/postgresql/{{ postgresql_major_version }}-main.pid'
      port = 5432
      max_connections = 100
      unix_socket_directories = '/var/run/postgresql'
      ssl = on
      ssl_cert_file = '/etc/ssl/certs/ssl-cert-snakeoil.pem'
      ssl_key_file = '/etc/ssl/private/ssl-cert-snakeoil.key'
      shared_buffers = 128MB
      dynamic_shared_memory_type = posix
      log_line_prefix = '%m [%p] %q%u@%d '
      log_timezone = 'UTC'
      cluster_name = '{{ postgresql_major_version }}/main'
      stats_temp_directory = '/var/run/postgresql/{{ postgresql_major_version }}-main.pg_stat_tmp'
      datestyle = 'iso, mdy'
      timezone = 'UTC'
      lc_messages = 'C'
      lc_monetary = 'C'
      lc_numeric = 'C'
      lc_time = 'C'
      default_text_search_config = 'pg_catalog.english'
      include_dir = 'conf.d'
      password_encryption = {{ postgresql_default_auth_method }}
      {% else %}
      max_connections = 100
      shared_buffers = 128MB
      dynamic_shared_memory_type = posix
      max_wal_size = 1GB
      min_wal_size = 80MB
      log_destination = 'syslog'
      log_timezone = 'UTC'
      update_process_title = off
      datestyle = 'iso, mdy'
      timezone = 'UTC'
      lc_messages = 'C'
      lc_monetary = 'C'
      lc_numeric = 'C'
      lc_time = 'C'
      default_text_search_config = 'pg_catalog.english'
      password_encryption = {{ postgresql_default_auth_method }}
      {% endif %}
    postgresql_users:
      - name: foo
        password: PassWord
      - name: root
        password: AdminPassWord
        role_attr_flags: SUPERUSER
      - name: "{{ netbox_db_user }}"
        password: "{{ netbox_db_password }}"

    postgresql_databases:
      - name: "{{ netbox_db_name }}"
        owner: "{{ netbox_db_user }}"
        state: present
      - name: bar
        owner: foo
        state: present

    project_postgresql_initdb_flags: --encoding=utf-8 --lc-collate=C --locale=en_US.UTF-8
    project_postgresql_initdb_flags_pwfile: "--pwfile={{ postgresql_initial_password_file }}"
    project_postgresql_initdb_flags_auth: "--auth-host={{ postgresql_default_auth_method }} --auth-local={{ postgresql_default_auth_method }}"
    os_postgresql_initdb_flags:
      FreeBSD: "{{ project_postgresql_initdb_flags }} {{ project_postgresql_initdb_flags_pwfile }} {{ project_postgresql_initdb_flags_auth }}"
      OpenBSD: "{{ project_postgresql_initdb_flags }} {{ project_postgresql_initdb_flags_pwfile }} {{ project_postgresql_initdb_flags_auth }}"
      RedHat: "{{ project_postgresql_initdb_flags }} {{ project_postgresql_initdb_flags_pwfile }} {{ project_postgresql_initdb_flags_auth }}"
      # XXX you cannot use --auth-host or --auth-local here because
      # pg_createcluster, which is executed during the installation, overrides
      # them, forcing md5
      Debian: "{{ project_postgresql_initdb_flags }} {{ project_postgresql_initdb_flags_pwfile }}"

    postgresql_initdb_flags: "{{ os_postgresql_initdb_flags[ansible_os_family] }}"
    os_postgresql_flags:
      FreeBSD: |
        postgresql_flags="-w -s -m fast"
      OpenBSD: ""
      Debian: ""
      RedHat: ""
    postgresql_flags: "{{ os_postgresql_flags[ansible_os_family] }}"

    # _________________________________________nginx
    www_root_dir: "{% if ansible_os_family == 'FreeBSD' %}/usr/local/www/nginx{% elif ansible_os_family == 'OpenBSD' %}/var/www/htdocs{% elif ansible_os_family == 'Debian' %}/var/www/html{% elif ansible_os_family == 'RedHat' %}/usr/share/nginx/html{% endif %}"
    nginx_flags: -q
    nginx_config: |
      {% if ansible_os_family == 'Debian' or ansible_os_family == 'RedHat' %}
      user {{ nginx_user }};
      pid /run/nginx.pid;
      {% endif %}
      worker_processes 1;
      error_log {{ nginx_error_log_file }};
      events {
        worker_connections 1024;
      }
      http {
        include {{ nginx_conf_dir }}/mime.types;
        include {{ nginx_conf_fragments_dir }}/foo.conf;
        access_log {{ nginx_access_log_file }};
        default_type application/octet-stream;
        sendfile on;
        keepalive_timeout 65;
        server {
          listen 80;
          server_name localhost;
          client_max_body_size 25m;

          location /static/ {
            alias {{ netbox_static_dir }}/;
          }
          location / {
            proxy_pass {{ netbox_bind_scheme }}://{{ netbox_bind_address }}:{{ netbox_bind_port }};
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
          }
        }
      }
    nginx_config_fragments:
      - name: foo.conf
        config: "# FOO"
        state: present
    nginx_extra_packages_by_os:
      FreeBSD:
        - security/py-certbot-nginx
      OpenBSD: []
      Debian:
        - nginx-extras
      RedHat: []
    nginx_extra_packages: "{{ nginx_extra_packages_by_os[ansible_os_family] }}"
    redhat_repo:
      epel:
        mirrorlist: "http://mirrors.fedoraproject.org/mirrorlist?repo=epel-{{ ansible_distribution_major_version }}&arch={{ ansible_architecture }}"
        gpgcheck: yes
        enabled: yes
    # _________________________________________redis
    redis_password: password
    redis_config:
      databases: 17
      save 900: 1
      requirepass: "{{ redis_password }}"
